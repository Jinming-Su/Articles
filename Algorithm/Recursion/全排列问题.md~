---
title: 全排列问题
date: 
categories:
- Algorithm
- Recursion
tags:
- recursion
description: ...
---

### 问题
* 一个集合内数据的全排列，不要求顺序，区别于C++中的next_permutation
* 问题分析
    * 这里采用递归的思想
    * 考虑递归关系
     
        ```
        //set: R = {r1, r2, ... , rn}
        perm(R) =
        {(r)}  //n = 1, r是集合R唯一的元素
        {(r1)perm(R1), (r2)perm(R2), ..., (rn)perm(Rn)  //n > 1
        ```
    * 当n > 1的情况，对大小为n的集合进行全排列，相当于每次从集合中挑选一个元素，放在第一个位置，然后对剩余的n-1个元素进行全排列.可以理解为每个位置的元素与第一个元素换位置.
     
### 代码实例
```
#include <iostream>
#include <cstdio>
using namespace std;

int arr[100];
int n;

void swap(int arr[], int i, int j) {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

void perm(int arr[], int cur) {
    if(cur == n-1) {
        for(int i = 0; i < n; i ++) {
            if(i == n-1) {
                printf("%d\n", arr[i]);
            } else {
                printf("%d ", arr[i]);
            }
        }
    } else {
        for(int i = cur; i < n; i ++) {
            swap(arr, cur, i);
            perm(arr, cur + 1);
            swap(arr, cur, i);
        }
    }
}

int main() {
    while(scanf("%d", &n) != EOF) {
        for(int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
        perm(arr, 0);
    }
}
```

