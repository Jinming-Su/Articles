---
title: 线段树
date: 
categories:
- Algorithm
- Data_Structure
tags:
- segment_tree
description: ...
---

> 作用： 快速地进行区间更新和求和等运算

## 基本知识
* 存储方式：数组
* 存储大小：n*4
* 数组中可能存在间隙,即未使用的空间
* build(int v, int l, int r)
* update(int v, int l, [int r], int m)
* query(int v, int l, int r)
* pushup(int v)  //把当前结点的信息更新到父结点

## 单点更新
* hdu 1166: 敌兵布阵(单点更新，区间求和)
  * 线段树模板题
  * 中文题目，不赘述，传送门http://acm.hdu.edu.cn/showproblem.php?pid=1166
  * 代码实例
  
        ```
        #include<iostream>
        #include<cmath>
        #include<cstring>
        #include<cstdio>
        #include<fstream>
        #include<algorithm>
        #include<string>
        #include<stack>
        #include<queue>
        #include<map>
        typedef long long LL;
        const int MAX=0xfffffff;
        using namespace std;
        const int mx=50005;
        class node {
        public:
            int l,r,sum;
        }tree[4*mx];
        int ans;
        int num[mx];
        void pushup(int v)
        {
            tree[v].sum=tree[v*2].sum+tree[v*2+1].sum;
        }
        void build(int v,int l,int r)
        {
            tree[v].l=l;
            tree[v].r=r;
            if(l==r)
            {
                tree[v].sum=num[l];
                return;
            }
            int mid=(l+r)/2;
            build(v*2,l,mid),build(v*2+1,mid+1,r);
            pushup(v);
        }
        void update(int v,int pos,int val)
        {
            if(tree[v].l==pos&&tree[v].r==pos)
            {
                tree[v].sum+=val;
                return;
            }
            int mid=(tree[v].l+tree[v].r)/2;
            if(pos<=mid)  update(v*2,pos,val);
            else  update(v*2+1,pos,val);
            pushup(v);
        }
        void query(int v,int l,int r)
        {
            if(tree[v].l==l&&tree[v].r==r)
            {
                ans+=tree[v].sum;
                return;
            }
            int mid=(tree[v].l+tree[v].r)/2;
            if(r<=mid)  query(v*2,l,r);
            else if(l>mid)  query(v*2+1,l,r);
            else  query(v*2,l,mid),query(v*2+1,mid+1,r);
        }
        int main( )
        {
            //freopen("1.txt","r",stdin);
            int t;
            while(scanf("%d",&t)!=EOF)
            {
                for(int kase=1;kase<=t;kase++)
                {
                    int n;
                    scanf("%d",&n);
                    for(int i=1;i<=n;i++)
                        scanf("%d",&num[i]);
                    build(1,1,n);
                    char s[10];
                    printf("Case %d:\n",kase);
                    while(scanf("%s",s)&&strcmp(s,"End")!=0)
                    {
                        int i,j;
                        scanf("%d%d",&i,&j);
                        if(strcmp(s,"Add")==0)
                            update(1,i,j);
                        else if(strcmp(s,"Sub")==0)
                            update(1,i,-j);
                        else if(strcmp(s,"Query")==0)
                        {
                            ans=0;
                            query(1,i,j);
                            printf("%d\n",ans);
                        }
                    }
                }
            }
            return 0;
        }
        ```
* hdu 1754: 我讨厌它(单点更新，区间最值)
  * 中文题目，传送门http://acm.hdu.edu.cn/showproblem.php?pid=1754
  * 代码实例
  
        ```
        #include<iostream>
        #include<cstdio>
        #include<cstring>
        #include<fstream>
        #include<cmath>
        #include<cstdlib>
        #include<algorithm>
        using namespace std;
        const int MAX=0xfffffff;
        const double MIN=1e-12;
        const int mx=2000020;
        int num[mx];
        int n,m;
        class node{
        public:
            int l,r,maxv;
        }tree[mx*3];
        int ans;
        void pushup(int v)
        {
            tree[v].maxv=max(tree[v*2].maxv,tree[v*2+1].maxv);
        }
        void bulid(int v,int l,int r)
        {
            tree[v].l=l,tree[v].r=r;
            if(l==r)
            {
                tree[v].maxv=num[l];
                return ;
            }
            int mid=(l+r)/2;
            bulid(v*2,l,mid),bulid(v*2+1,mid+1,r);
            pushup(v);
        }
        int query(int v,int l,int r)
        {
            if(l==tree[v].l&&tree[v].r==r)  return tree[v].maxv;
            else
            {
                int mid=(tree[v].l+tree[v].r)/2;
                if(r<=mid)  return query(v*2,l,r);
                else if(l>mid)  return query(v*2+1,l,r);
                else   return max(query(v*2,l,mid),query(v*2+1,mid+1,r));
            }
        }
        void update(int v,int pos,int val)
        {
            if(tree[v].l==pos&&tree[v].r==pos)
            {
                tree[v].maxv=val;
                return;
            }
            int mid=(tree[v].l+tree[v].r)/2;
            if(pos<=mid)  update(v*2,pos,val);
            else  update(v*2+1,pos,val);
            pushup(v);
        }
        int main( )
        {
            freopen("1.txt","r",stdin);
            while(scanf("%d%d",&n,&m)!=EOF)
            {
                for(int i=1;i<=n;i++)
                    scanf("%d",&num[i]);
                bulid(1,1,n);
                while(m--)
                {
                    getchar();
                    char c;
                    int a,b;
                    scanf("%c%d%d",&c,&a,&b);
                    if(c=='Q')
                        printf("%d\n",query(1,a,b));
                    else if (c=='U')
                    {
                        num[a]=b;
                        update(1,a,b);
                    }
                }
            }
            return 0;
        }
        ```

## 其他部分之后需要补充
