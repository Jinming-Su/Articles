***
## poj 1703
* 问题
  * 描述
        * 塔都城的警察办公室希望结束现在的混乱，第一步准备去铲除龙帮和蛇帮.因此，警察需要先确定犯人属于哪个帮派.这个问题描述为，给定两个犯人，确定他们是否属于同一个帮派.你必须基于不完整的信息给出判断.
        * 假定N(N <= 10 ^ 5)个出现在塔都城，标记为1 - N.当然，每个人或属于龙帮，或属于蛇帮.给定M(M <= 10 ^ 5)条信息，可能有两种形式：
        * 1. D a b  //其中a和b是两个人犯人的标号，他们属于不同的帮派.
        * 2. A a b //a,b是两个犯人的标号，需要确定他们是否属于同一帮派.
  * 输入
        * 第一行是T(1 <= T <= 20), 表示样例的个数.接着T个样例.每个样例开始的第一行是N和M，接着M行如上描述.
  * 输出
        * 对于每个信息'A a b',需要给出判断.回答是'In the same gang.' 或者 'In different gangs.'或者'Not sure yet.'
  * 输入样例
    
        ```
        1
        5 5
        A 1 2
        D 1 2
        A 1 2
        D 2 4
        A 1 4
        ```
  * 输出样例
 
        ```
        Not sure yet.
        In different gangs.
        In the same gang.
        ```
* 问题分析
  * 问题就是判断两个人是否在同一个集合中，或者无法确定.直接使用并查集并不容易解决.
  * 书上提供的一种方法是：如果两者关系确定了，就放入同一个集合中，标记每个节点和最远祖先的关系.确定不同节点的关系时，先判断两个祖先是否相同，如果不同则没有关系；如果相同，则根据两个与祖先的关系容易算出.当给出D条件时，需要进行合并操作.
* 代码实例
  
    ```
    #include <iostream>
    #include <cstdio>
    #include <algorithm>
    #include <cstring>
    using namespace std;
    
    const int maxn = 110000;
    
    int father[maxn];
    int relate[maxn];
    
    void makeSet() {
    	for(int i = 1; i < maxn; i ++) {
    		father[i] = i;
    		relate[i] = 0; // 0 means same
    	}
    }
    
    int findSet(int x) {
    	if(x != father[x]) {
            int temp = father[x];
    		father[x] = findSet(father[x]);
    		relate[x] = (relate[x] == relate[temp])? 0 : 1;
    	}
    	return father[x];
    }
    
    void unionSet(int a, int b, int faa, int fab) {
    	father[faa] = fab;
    	relate[faa] = (relate[a] == relate[b])? 1 : 0;
    }
    
    int main() {
    	//freopen("in.txt", "r", stdin);
    	int t;
    	scanf("%d", &t);
    	while(t --) {
    		int n,m;
    		scanf("%d %d", &n, &m);
    		memset(father, 0, sizeof(father));
    		memset(relate, 0, sizeof(relate));
    		makeSet();
    		while(m --) {
    			char opt[2];
    			int a,b;
    			scanf("%s %d %d", opt, &a, &b);
    			int faa = findSet(a), fab = findSet(b);
    			if(opt[0] == 'A') {
    				if(faa != fab)	{
    					printf("Not sure yet.\n");
    				} else {
    					if(relate[a] == relate[b]) {
    						printf("In the same gang.\n");
    					} else {
    						printf("In different gangs.\n");
    					}
    				}
    			} else {
    				if(faa != fab) {
    					unionSet(a, b, faa, fab);
    				}
    			}
    		}
    	}
    	return 0;
    }
    ```
* 代码说明
  * 对于findSet()函数，开始的写法是这样的  
   
        ```
        int findSet(int x) {
        	if(x != father[x]) {
                relate[x] = (relate[x] == relate[fathe[x])? 0 : 1;
        		father[x] = findSet(father[x]);
        	}
        	return father[x];
        }
        ```  
    开始以为这种写法是正确的，调试了很久没有找出错误，后来看了别人的代码，才发现了错误的地方：如果先进行relate[x]的求值，此时还没进行路径压缩，father[x]的relate是它与父节点（而不是祖先节点）的关系，所以求出的relate[x]是x与x的爷爷节点的关系，而不是x与祖先节点的关系，所以导致错误.

