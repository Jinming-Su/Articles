---
title: 泛型编程
date: 
categories:
- C++
tags:
description: ...
---

> 所谓泛型编程，就是不依赖于具体数据类型的编程方法。C++提供的标准模板库是面向对象程序设计和泛型程序设计思想结合的一个良好典范。  

### STL  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STL（自行百度）涉及四个组件：容器、迭代器、函数对象、算法。　　
* 先举个栗子  
    
    ```C++
    #include <iostream>  
    #include <vector>  
    #include <iterator>  
    #include <algorithm>
    #include <functional>
    using namespace std;

    int main() {
        const int N = 5;
        vector<int>s(N);
        for(int i = 0; i < N; i ++) {
            cin >> s[i];
        }
        transform(s.begin(), s.end(), ostream_iterator<int>(cout, " "), negate<int>());
        cout<<endl;
        return 0;
    }
    ```
* **容器**  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C++容器类库包含7个基本容器：vector, deque, list, set, multiset, map, multimap。分为两种基本类型，顺序容器（vector, deque, list）和关联容器(*set, *map)。  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上例中，vector就是一个容器，需要导入不同的头文件。  
* **迭代器**  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;迭代器提供顺序访问容器中每一个元素的方法。`++`运算符可以获取指向下一个元素的迭代器，`*`运算符可以访问迭代器指向的元素，如果元素类型是类或结构体，`->`运算符可以直接访问该元素的一个成员。  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**指针本身就是一种迭代器，迭代器是泛化的指针（迭代器是指针的抽象和泛化）。**指针能指向函数而迭代器不行，迭代器只能指向容器，指针满足迭代器的一切要求。  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上例中,s.begin(), s.end(), ostream_iteartor<>()都是迭代器。使用迭代器，需要导入头文件`<iterator>`。  
* **函数对象**  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;函数对象是一个行为类似函数的对象，对他可以像调用函数一样调用。**任何普通的函数和任何重载了()运算符的类的对象都可以作为函数对象调用，函数对象是泛化的函数**。  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上例中,negate是一个类模板，它重载了()运算符。使用函数对象，需要导入头文件`<functional>`  
* **算法**  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STL中包含70多个算法，包括查找、排序、消除、计数、比较、变换、置换和容器管理等。  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上例中transform就是一个算法。使用算法，需要导入头文件`<algorithm>`  
* **4个组件的关系**  
    
    ```
    container---(it)--->algorithm---(it)--->container
                            |
                            |
                            -
                        function object
    ```
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STL把迭代器作为算法的参数，通过迭代器来访问容器而不是把容器直接作为算法的参数；STL把函数对象作为算法的参数而不是把函数所执行的预案算作为算法的一部分。  

### 迭代器  
* 输入流迭代器  

    ```
    //输入流迭代器是一个类模板
    template<class T>istream_iterator<T>
    //一个输入流迭代器的实例需要由下面的构造函数来构造
    istream_iterator(istream &in)
    ```
* 输出流迭代器  

    ```
    //类模板  
    template<clss T>ostream_iterator<T>
    //构造函数
    ostream_iteartor(ostream &out)或
    ostream_iteartor(ostream &out, const char* delimiter)
    ```
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;添加一个概念--**适配器**。适配器是指用于为已有对象提供新的接口的对象，适配器本身一般不提供新的功能，只为了改变对象的接口而存在。例如，输入流迭代器是一种适配器，输入流迭代器将输入流的接口变更为迭代器的接口。  
* 迭代器分类  

    ```
    输入迭代器　　　　　　    输出迭代器
             |            |
              |          |
               |        |
               前向迭代器
                    |
                    |
               双向迭代器
                    |
                    |
               随机访问迭代器
    ```
    说明：STL根据迭代器的功能，分为这5类迭代器，途中从上到下表示概念和子概念的关系，例如前向迭代器肯定是输入迭代器也肯定是输出迭代器。  
* 迭代器的辅助函数[了解]  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STL为迭代器提供了连个辅助函数模板--advance和distance。他们为所有迭代器提供了随机访问和计算距离的能力。  

### 容器  
* 容器支持的基本功能  
    
    ```
    S s
    s op s2 //可以进行==,!=,>,<等操作，按照字典序进行比较
    s.begin()
    s.end()
    s.clear()
    s.empty()
    s.size()
    s.swap(s2) //将容器s与s2的内容进行交换
    ```
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照顺序容器和关联容器的侧重点不同，两类容器各自添加了许多功能。由于许多不常用，所以不一一列举，自行查阅。  
* 栈和队列  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈和队列是STL中的容器适配器，是对顺序容器的封装。  
    * 栈和队列的两个类模板  
        
        ```
        template<class T, class Sequence=deque<T>>class stack;
        template<class T, class FrontInsertionSequence=deque<T>>class queue;
        ```
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上式中，模板参数T表示元素类型，第二个模板参数表示基础的容器类型。栈可以用任何一种顺序容器作为基础容器，而队列只允许用前插熟顺序容器（deque或者list）作为基础容器。如果不指定第二个参数，则默认使用双端队列deque  

### 函数对象  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在论述函数对象之前，可以先回忆两个例子`sort(a, a + n , cmp)`，这个例子中（这个例子是c++中对一个数组快排的方法）,cmp就是使用普通函数定义的函数对象；另一个例子是本文开始的时候举得例子，negate<int>对()运算符进行重载，构成了函数对象。下边，重新给出函数对象的定义：**函数对象是一个行为类似函数的对象，对他可以像调用函数一样调用。任何普通的函数和任何重载了()运算符的类的对象都可以作为函数对象调用，函数对象是泛化的函数**  
* 常用函数对象分类  
    
    ```
    函数对象
    产生器  一元函数对象    二元函数对象
           一元谓词       二元谓词
    ```
* 标准的函数对象  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了上边提到的通过自定义的函数对象实现算法的不同操作形式，STL中也定义了一些标准的函数对象。  
    * 产生器、一元函数、二元函数（名字的来历是它们是具有0、1、2个传入参数的函数对象）  
    
        ```
        plus<T>
        minus<T>
        multiplies<T>
        divides<T>
        modulus<T>
        negate<T>
        ```
    * 一元谓词和二元谓词（经常用来判断真假、比较大小的函数对象，返回值为bool型，并具有1、2个参数）,其实就是比较大小关系和逻辑关系那一套函数，不在列举  
* 函数适配器[了解]  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STL中的一些函数对象，有时候需要对函数返回值进行进一步的简单计算，或者填上多余的参数等，不能直接代入算法。函数适配器就实现了这个功能，将一种函数对象转化为另一种符合要求的函数对象。  
* 分类  
    * 绑定适配器(binder1st, binder2nd)  
    * 组合适配器(pointer_to_unary_function, pointer_to_binary_function)  
    * 指针函数适配器(unary_negate, binary_negate)  
    * 成员函数适配器  

### 算法  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;算法本身就是一种函数模板，STL中几乎所有算法的头文件都是`<algorithm>`  
* 分类  
    * 非可变序列的算法  
    * 可变序列的算法  
    * 排序相关的算法  
    * 通用数值算法（头文件是`<numeric>`）  

### Boost  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有了STL之后，大大提高了软件开发效率，但是C++标准库的功能毕竟是有限的，于是就涌现了许多的第三方程序库，其中Boost是最具影响力的。  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boost由几十个程序库构成，一些程序库提供了STL之外的容器、函数对象和算法，涉及文本处理、数值计算、向量和矩阵计算、图像处理、内存管理、并行编程、分布式计算、模板元编程等方面。  
